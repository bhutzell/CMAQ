#INLINE F90_RCONST
  ! Ensure local Y array is filled with variable and constant concentrations
  ! This will need to be removed when switching to KPP version 3.2.0 or above
  Y(1:NSPEC) = C(1:NSPEC)

  ! Update aqueous diffusion correction (GM1 & GM2)
  IF ( LCL_RS ) CALL UPDATE_GM1_GM2( GM1_RS, GM2_RS, PHI2_RS, Y, 1 )
  IF ( LCL_CV ) CALL UPDATE_GM1_GM2( GM1_CV, GM2_CV, PHI2_CV, Y, 2 )
#ENDINLINE

#INLINE F90_GLOBAL
! Related to cloud chemistry
REAL(dp), PARAMETER :: DDIAM = 1.6D-5 ! Droplet Diameter (m)
REAL(dp), PARAMETER :: DAQ = 1.0D-9   ! Aqueous phase diffusion coefficient (m2/s)
REAL(dp)            :: LWC_RS        ! Resolved cloud lwc (kg/m3)
REAL(dp)            :: LWC_CV        ! Convective cloud lwc (kg/m3)
REAL(dp)            :: XCL_RS        ! Calculated resolved cloud chemistry (1=yes,0=no)
REAL(dp)            :: XCL_CV        ! Calculated convective cloud chemistry (1=yes,0=no)
REAL(dp)            :: PHI2_RS       !
REAL(dp)            :: PHI2_CV       !
REAL(dp)            :: GM1_RS        !
REAL(dp)            :: GM1_CV        !
REAL(dp)            :: GM2_RS        !
REAL(dp)            :: GM2_CV        !
REAL(dp)            :: WFAC_RS       !
REAL(dp)            :: WFAC_CV       !
REAL(dp)            :: KPP_ALFA3_RS  !
REAL(dp)            :: KPP_ALFA3_CV  !
LOGICAL             :: LCL_RS = .FALSE.
LOGICAL             :: LCL_CV = .FALSE.
LOGICAL             :: LCL    = .FALSE.
REAL(dp), PARAMETER :: CFRAC_RS = 1.0D0
REAL(dp)            :: CFRAC_CV
! Henry's law constants. Just temporary
REAL(dp)            :: H_SO2, H_HNO3, H_CO2, H_NH3, H_H2O2
REAL(dp)            :: H_O3, H_FACD, H_HCL, H_GLY, H_MGLY
REAL(dp)            :: H_OH, H_HO2, H_NO2, H_HONO, H_HNO4
REAL(dp)            :: H_GLYD, H_AACD, H_FORM, H_NO3, H_CH3O2
REAL(dp)            :: H_IEPOX, H_MHP, H_PAA
REAL(dp)            :: H_IMAE, H_IHMML
! Scavenging rates
REAL(dp)            :: KPP_RSCAV(NSPEC)
! IEPOX related
INTEGER, PARAMETER  :: ISPC8 = 0     ! = 0 if aerosol module is not AE6I or AE7I
                                     ! = 1 if aerosol module is AE6I or AE7I
#ENDINLINE

#INLINE F90_RATES
REAL( dp ) FUNCTION KMT(TEMP,LWC,MMASS,DG,HENRY,ACOM,FB)
  IMPLICIT NONE
  REAL( dp ), INTENT( IN ) :: TEMP
  REAL( dp ), INTENT( IN ) :: LWC
  REAL( dp ), INTENT( IN ) :: MMASS
  REAL( dp ), INTENT( IN ) :: DG
  REAL( dp ), INTENT( IN ) :: HENRY
  REAL( dp ), INTENT( IN ) :: ACOM
  INTEGER,   INTENT( IN ) :: FB ! logical (forward/backward)
  REAL( dp )               :: RAD
  REAL( dp )               :: R_KMT
  REAL( dp )               :: R2_KMT
  REAL( dp )               :: PI_KMT
  REAL( dp )               :: V_mean
  INTRINSIC DEXP

  RAD    = DDIAM * 0.5D0
  R_KMT  = 8.3145D0
  R2_KMT = 0.08206D0
  PI_KMT = 3.1415926536D0

  V_mean = SQRT( 8D0 * R_KMT * TEMP * 1000.0D0 / PI_KMT / MMASS )
  KMT    = 1.0D0/((RAD*RAD)/(3D0*DG)+(4D0*RAD/(3D0*V_mean*ACOM)))
  IF ( FB .EQ. 0 ) THEN
     KMT = KMT * LWC / 1000.0D0
  ELSE
     KMT   = KMT  / ( R2_KMT * TEMP * HENRY )
  END IF
  RETURN
END FUNCTION KMT


REAL( kind=dp ) FUNCTION DISF ( KEQ, DH, KB, G1, CLTYPE )

  IMPLICIT NONE

  REAL( kind=dp ),      INTENT( IN ) :: DH, KEQ, KB
  INTEGER,              INTENT( IN ) :: G1
  CHARACTER( LEN = 2 ), INTENT( IN ) :: CLTYPE

  REAL( kind=dp ) :: GM1

  ! Select cloud indices and properties
  IF ( CLTYPE .EQ. 'RS' ) THEN
     GM1 = GM1_RS
  ELSE IF ( CLTYPE .EQ. 'CV' ) THEN
     GM1 = GM1_CV
  END IF

  DISF = KB * ( KEQ * EXP( DH * TFAC ) )

  IF( G1 .eq. 1 ) DISF = DISF * ( GM1 )

  RETURN

END FUNCTION DISF

REAL( kind=dp ) FUNCTION DISB ( KB, G1, CLTYPE )

  IMPLICIT NONE

  REAL( kind=dp ),      INTENT( IN ) :: KB
  INTEGER,              INTENT( IN ) :: G1
  CHARACTER( LEN = 2 ), INTENT( IN ) :: CLTYPE

  REAL( kind=dp ) :: GM1, GM2, PHI2

  ! Select cloud indices and properties
  IF ( CLTYPE .EQ. 'RS' ) THEN
     GM1  = GM1_RS
     GM2  = GM2_RS
     PHI2 = PHI2_RS
  ELSE IF ( CLTYPE .EQ. 'CV' ) THEN
     GM1  = GM1_CV
     GM2  = GM2_CV
     PHI2 = PHI2_CV
  END IF

  DISB = KB

  IF( G1 .eq. 1 ) DISB   = DISB * GM1 * GM2
  IF( G1 .eq. 2 ) DISB   = DISB * GM1 * GM1

  DISB = DISB * PHI2

  RETURN

END FUNCTION DISB

REAL( kind=dp )FUNCTION KRXN ( KR, DH, RTYPE, QY, METAL, CLTYPE, VAR )

     IMPLICIT NONE

     ! Input
     REAL( kind=dp )     , INTENT( IN ) :: KR, DH
     INTEGER             , INTENT( IN ) :: QY, RTYPE, METAL
     CHARACTER( LEN = 2 ), INTENT( IN ) :: CLTYPE
     REAL( kind=dp )     , INTENT( IN ) :: VAR( : )

     ! Local variables
     REAL( kind=dp )      :: Q, q1, COTHq, SVIinh
     REAL( kind=dp )      :: kO31, kO32, kO33, kO3T
     INTEGER              :: ind_L_H2SO4, ind_L_HSO4MIN, ind_L_SO4MIN2
     INTEGER              :: ind_L_HPLUS
     INTEGER              :: ind_L_SO2, ind_L_HSO3MIN, ind_L_SO3MIN2
     REAL( kind=dp )      :: PHI2

     ! Select cloud indices and properties
     IF ( CLTYPE .EQ. 'RS' ) THEN
       IND_L_HPLUS   = ind_Hp_RS
       IND_L_H2SO4   = ind_SULF_RS
       IND_L_HSO4MIN = ind_HSO4m_RS
       IND_L_SO4MIN2 = ind_SO4mm_RS
       IND_L_SO2     = ind_SO2_RS
       IND_L_HSO3MIN = ind_HSO3m_RS
       IND_L_SO3MIN2 = ind_SO3mm_RS
       PHI2          = PHI2_RS
     ELSE IF ( CLTYPE .EQ. 'CV' ) THEN
       IND_L_HPLUS   = ind_Hp_CV
       IND_L_H2SO4   = ind_SULF_CV
       IND_L_HSO4MIN = ind_HSO4m_CV
       IND_L_SO4MIN2 = ind_SO4mm_CV
       IND_L_SO2     = ind_SO2_CV
       IND_L_HSO3MIN = ind_HSO3m_CV
       IND_L_SO3MIN2 = ind_SO3mm_CV
       PHI2          = PHI2_CV
     END IF


     KRXN = KR * EXP( DH * TFAC )

     IF ( RTYPE .EQ. 1 ) THEN   ! SO2 - H2O2 OXIDATION
        KRXN = ( KRXN / ( 1.0D0 + 13.0D0 * VAR( ind_L_HPLUS ) * PHI2 ) ) * PHI2
!    ELSE IF ( RTYPE .EQ. 2 ) then   ! SO2 - PAA OXIDATION
!       KRXN = KRXN * (VAR(ind_L_HPLUS) * PHI2) + 7.00D2
     ELSE IF ( RTYPE .EQ. 3 ) then   ! SO2 - Fe3/Mn2 synergism and
        KRXN = KRXN * PHI2           ! MHP and PAA reaction
     ELSE IF ( RTYPE .EQ. 4 ) then   ! only one reactant
        KRXN = KRXN / PHI2
     END IF

     ! SO4 inhibition only for metal-catalyzed oxidation
     IF (METAL .GT. 0) THEN
        ! SO4 inhibition of metal catalysis
        SVIinh = 1.0D0 + 75.0D0 * ( ( VAR( ind_L_H2SO4 )     &
                 +                    VAR( ind_L_HSO4MIN )   &
                 +                    VAR( ind_L_SO4MIN2 ) ) &
                 * PHI2 )**0.67D0
        KRXN = KRXN / SVIinh
     END IF

!    Ionic strength impact on SIV-O3 reaction rate
!          IF (QY .GT. 0) THEN
!             KRXN = KRXN * (1.0D0 + 2.5 * STION)
!          END IF

!    Aqueous diffusion limitation for O3

     q1 = 0.0D0
     Q = 1.0D0

     IF( QY .GE. 1 ) THEN

        kO31 = 2.4D+4 * EXP( 0.0D0 * TFAC )
        kO32 = 3.7D+5 * EXP( -5530.88D0 * TFAC )
        kO33 = 1.5D+9 * EXP( -5280.56D0 * TFAC )
        kO3T = ( kO31 * VAR( ind_L_SO2 ) + kO32 &
             * VAR( ind_L_HSO3MIN ) &
             + kO33 * VAR( ind_L_SO3MIN2 ) ) * PHI2

        q1 = DDIAM / 2.0D0 * SQRT( kO3T / DAQ )  ! diffuso-reactive param

        IF ( q1 .GT. 1.0D-3 ) THEN
           IF ( q1 .LE. 100.0D0 ) THEN
              COTHq = ( EXP( 2 * q1 ) + 1 ) / ( EXP( 2 * q1 ) - 1 )
              Q = 3 * ( ( COTHq / q1 ) - ( 1 / ( q1 * q1 ) ) )
              IF ( Q .GT. 1.0D0 ) Q = 1.0D0
           ELSE
              Q = 3.d0/q1
           END IF
        ELSE
           Q = 1.0D0
        END IF

        KRXN = KRXN * Q

     END IF

     KRXN = KRXN * PHI2

     RETURN
END FUNCTION KRXN

REAL( kind=dp )FUNCTION KIEPOX ( KH, KHSO4, TYPE, CLTYPE, VAR )

     IMPLICIT NONE

     ! Input
     REAL( kind=dp ),      INTENT( IN ) :: KH, KHSO4
     INTEGER,              INTENT( IN ) :: TYPE
     CHARACTER( LEN = 2 ), INTENT( IN ) :: CLTYPE
     REAL( kind=dp )     , INTENT( IN ) :: VAR( : )

     ! Local variables
     REAL( kind=dp )      :: K1, K2
     REAL( kind=dp )      :: KIEPOXT, KMAET
     REAL( kind=dp )      :: Q, q1, COTHq
     INTEGER              :: ind_L_HPLUS
     INTEGER              :: ind_L_H2O, ind_L_HSO4MIN, ind_L_SO4MIN2
     INTEGER              :: ind_L_NO3MIN, ind_L_IETET, ind_L_IEOS
     REAL( kind=dp )      :: PHI2

     ! Select cloud indices and properties
     IF ( CLTYPE .EQ. 'RS' ) THEN
       IND_L_HPLUS   = ind_Hp_RS
       IND_L_H2O     = ind_H2O_RS
       IND_L_HSO4MIN = ind_HSO4m_RS
       IND_L_SO4MIN2 = ind_SO4mm_RS
       IND_L_NO3MIN  = ind_NO3m_RS
       IND_L_IETET   = ind_IETET_RS
       IND_L_IEOS    = ind_IEOS_RS
       PHI2          = PHI2_RS
     ELSE IF ( CLTYPE .EQ. 'CV' ) THEN
       IND_L_HPLUS   = ind_Hp_CV
       IND_L_H2O    = ind_H2O_CV
       IND_L_HSO4MIN = ind_HSO4m_CV
       IND_L_SO4MIN2 = ind_SO4mm_CV
       IND_L_NO3MIN  = ind_NO3m_CV
       IND_L_IETET   = ind_IETET_CV
       IND_L_IEOS    = ind_IEOS_CV
       PHI2          = PHI2_CV
     END IF

     K1 = KH * VAR( ind_L_HPLUS ) * PHI2
     K2 = KHSO4 * VAR( ind_L_HSO4MIN ) * PHI2

     KIEPOX = K1 + K2
!
! Aqueous diffusion limitation for IEPOX and MAE
!
!
     q1 = 0.0D0
     Q = 1.0D0

     IF( TYPE .le. 1 ) THEN   ! FOR IEPOX

        K1 = 9.0D-4 * VAR( ind_L_HPLUS ) * PHI2
        K2 = 1.31D-5 * VAR( ind_L_HSO4MIN ) * PHI2
        KIEPOXT = (K1 + K2) * VAR( ind_L_H2O ) * PHI2  ! IEPOX + H2O

        K1 = 8.83D-3 * VAR( ind_L_HPLUS ) * PHI2
        K2 = 2.92D-6 * VAR( ind_L_HSO4MIN ) * PHI2
        KIEPOXT = KIEPOXT + (K1 + K2) * VAR( ind_L_SO4MIN2 ) &
                * PHI2  ! IEPOX + SO4

        K1 = 2.0D-4 * VAR( ind_L_HPLUS ) * PHI2
        K2 = 2.92D-6 * VAR( ind_L_HSO4MIN ) * PHI2

        IF( ISPC8 .LE. 0 ) THEN
           KIEPOXT = KIEPOXT + (K1 + K2) * VAR( ind_L_NO3MIN ) * PHI2    ! IEPOX + NO3
        ELSE
           KIEPOXT = KIEPOXT + (K1 + K2) * VAR( ind_L_IETET ) &
                   * PHI2    ! IEPOX + IETET
           KIEPOXT = KIEPOXT + (K1 + K2) * VAR( ind_L_IEOS ) &
                   * PHI2     ! IEPOX + IEOS
        ENDIF

        q1 = DDIAM/2.0D0 * SQRT( KIEPOXT / DAQ )

        IF ( q1 .GT. 1.0D-3 ) THEN
           IF ( q1 .LE. 100.0D0 ) THEN
              COTHq = ( EXP( 2 * q1 ) + 1 ) / ( EXP( 2 * q1 ) - 1 )
              Q = 3 * ( ( COTHq / q1 ) - ( 1 / ( q1 * q1 ) ) )
              IF ( Q .GT. 1.0D0 ) Q = 1.0D0
           ELSE
              Q = 3.d0/q1
           END IF
        ELSE
           Q = 1.0D0
        END IF

     ELSE   ! FOR MAE OR HMML

        K1 = 9.0D-4 * VAR( ind_L_HPLUS ) * PHI2
        K2 = 1.31D-5 * VAR( ind_L_HSO4MIN ) * PHI2
        KMAET = (K1 + K2) * VAR( ind_L_H2O ) &
              * PHI2  ! MAE/HMML + H2O

        K1 = 2.0D-4 * VAR( ind_L_HPLUS ) * PHI2
        K2 = 2.92D-6 * VAR( ind_L_HSO4MIN ) * PHI2
        KMAET = KMAET + (K1 + K2) * VAR( ind_L_SO4MIN2 ) &
              * PHI2  ! MAE/HMML + SO4

        q1 = DDIAM/2.0D0 * SQRT( KMAET / DAQ )

        IF ( q1 .GT. 1.0D-3 ) THEN
           IF ( q1 .LE. 100.0D0 ) THEN
              COTHq = ( EXP( 2 * q1 ) + 1 ) / ( EXP( 2 * q1 ) - 1 )
              Q = 3 * ( ( COTHq / q1 ) - ( 1 / ( q1 * q1 ) ) )
              IF ( Q .GT. 1.0D0 ) Q = 1.0D0
           ELSE
              Q = 3.d0/q1
           END IF
        ELSE
           Q = 1.0D0
        END IF
     END IF

     KIEPOX = KIEPOX * Q

     KIEPOX = KIEPOX * PHI2

     IF( ISPC8 .LE. 0 ) THEN
        IF( TYPE .GT. 0 ) KIEPOX = 0.d0
     ELSE
        IF( TYPE .LT. 1 ) KIEPOX = 0.d0
     END IF

     RETURN

END FUNCTION KIEPOX
#ENDINLINE
