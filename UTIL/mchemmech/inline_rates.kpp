#INLINE F90_RATES
REAL(kind=dp) FUNCTION FALL_OFF ( A0,B0,C0,A1,B1,C1,CE,CF)
  IMPLICIT NONE
  REAL(kind=dp), INTENT( IN ) :: A0,B0,C0,A1,B1,C1,CE,CF
  REAL(kind=dp) K0, K1, KEND
! K0 = A0 * COEFF_FALLOFF * DEXP(B0/TEMP)* (TEMP/300.0_dp)**C0
! K1 = A1 * DEXP(B1/TEMP) * (TEMP/300.0_dp)**C1
  K0 = A0 * COEFF_FALLOFF * DEXP(B0*INV_TEMP)* (TEMP/300.0_dp)**C0
  K1 = A1 * DEXP(B1*INV_TEMP) * (TEMP/300.0_dp)**C1
  KEND = ( ( 1.0_dp + ( ( 1.0_dp / CE ) * DLOG10( K0 / K1 ) ) ** 2.0_dp ) )
  KEND = 1.0_dp / KEND
  FALL_OFF = ( K0 / ( 1.0_dp + K0/K1 ) ) * CF ** KEND
END FUNCTION FALL_OFF

REAL( kind=dp ) FUNCTION HALOGEN_FALLOFF(A1,B1,A2,B2,A3)
   IMPLICIT NONE
   REAL( kind=dp ), INTENT( IN ) :: A1
   REAL( kind=dp ), INTENT( IN ) :: B1
   REAL( kind=dp ), INTENT( IN ) :: A2
   REAL( kind=dp ), INTENT( IN ) :: B2
   REAL( kind=dp ), INTENT( IN ) :: A3
   INTRINSIC DEXP
   IF ( ( OPEN_WATER ) .AND. LSUNLIGHT ) THEN
       HALOGEN_FALLOFF = A1 * DEXP( B1 * PRESS ) + A2 * DEXP( B2 * PRESS )
       HALOGEN_FALLOFF = DMIN1( A3, HALOGEN_FALLOFF) 
       HALOGEN_FALLOFF = HALOGEN_FALLOFF * SEAWATER
   ELSE
       HALOGEN_FALLOFF = 0.0_dp
   END IF
   RETURN
END FUNCTION HALOGEN_FALLOFF

   REAL(kind=dp) FUNCTION ARR2_DP( A0,B0 )
   ! Same as ARR2 just taking A0 and B0 in dp
      REAL(kind=dp) A0,B0
      ARR2_DP =  A0 * EXP( B0/TEMP )
   END FUNCTION ARR2_DP

       REAL( kind=dp ) FUNCTION POWER_T02( A0,B0 )
         IMPLICIT NONE
! rate constant for CMAQ Arrhenuis reaction type 2
! Arguements:
         REAL( kind=dp ), INTENT( IN ) :: A0
         REAL( kind=dp ), INTENT( IN ) :: B0
         ! Local
         REAL( kind=dp ) :: TEMPOT300
         TEMPOT300 = TEMP / 300.0D0
         POWER_T02 =  A0 * TEMPOT300**B0
         RETURN
       END FUNCTION POWER_T02

       REAL( kind=dp ) FUNCTION ARRHENUIS_T04( A0,B0,C0 )
         IMPLICIT NONE
! rate constant for CMAQ Arrhenuis reaction type 4
! Arguements:
         REAL( kind=dp ), INTENT( IN ) :: A0
         REAL( kind=dp ), INTENT( IN ) :: B0
         REAL( kind=dp ), INTENT( IN ) :: C0
         ! Local:
         INTRINSIC DEXP
         REAL( kind=dp ) :: INV_TEMP
         REAL( kind=dp ) :: TEMPOT300
         INV_TEMP  = 1.0D0 / TEMP
         TEMPOT300 = TEMP / 300.0D0
         ARRHENUIS_T04 =  A0 * DEXP( B0 * INV_TEMP ) * TEMPOT300**C0
         RETURN
       END FUNCTION ARRHENUIS_T04

       REAL( kind=dp ) FUNCTION FALLOFF_T08(A0,C0,A2,C2,A3,C3)
! rate constant for CMAQ fall off reaction type 8
         IMPLICIT NONE
! Arguements:
         REAL( kind=dp ), INTENT( IN ) :: A0
         REAL( kind=dp ), INTENT( IN ) :: C0
         REAL( kind=dp ), INTENT( IN ) :: A2
         REAL( kind=dp ), INTENT( IN ) :: C2
         REAL( kind=dp ), INTENT( IN ) :: A3
         REAL( kind=dp ), INTENT( IN ) :: C3
         ! Local:
         REAL( kind=dp ) K0
         REAL( kind=dp ) K2
         REAL( kind=dp ) K3
         REAL( kind=dp ) :: INV_TEMP
         INTRINSIC DEXP
         INV_TEMP  = 1.0D0 / TEMP
         K0 = A0 * DEXP( C0 * INV_TEMP )
         K2 = A2 * DEXP( C2 * INV_TEMP )
         K3 = A3 * DEXP( C3 * INV_TEMP )
         K3 = K3 * COEFF_FALLOFF
         FALLOFF_T08 = K0 + K3/( 1.0D0 + K3/K2 )
         RETURN
       END FUNCTION FALLOFF_T08

       REAL( kind=dp ) FUNCTION FALLOFF_T09(A1,C1,A2,C2)
! rate constant for CMAQ fall off reaction type 9
         IMPLICIT NONE
! Arguements:
         REAL( kind=dp ), INTENT( IN ) :: A1
         REAL( kind=dp ), INTENT( IN ) :: C1
         REAL( kind=dp ), INTENT( IN ) :: A2
         REAL( kind=dp ), INTENT( IN ) :: C2
         !  Local:
         REAL( kind=dp ) K1
         REAL( kind=dp ) K2
         REAL( kind=dp ) :: INV_TEMP
         INTRINSIC DEXP
         INV_TEMP  = 1.0D0 / TEMP
         K1 = A1 * DEXP( C1 * INV_TEMP )
         K2 = A2 * DEXP( C2 * INV_TEMP )
         FALLOFF_T09 = K1 + K2 * COEFF_FALLOFF
         RETURN
       END FUNCTION FALLOFF_T09
       REAL( kind=dp ) FUNCTION FALLOFF_T10(A0,B0,C0,A1,B1,C1,CE,CF)
         IMPLICIT NONE
! rate constant for CMAQ fall off reaction type 10
! Arguements:
         REAL( kind=dp ), INTENT( IN ) :: A0
         REAL( kind=dp ), INTENT( IN ) :: B0
         REAL( kind=dp ), INTENT( IN ) :: C0
         REAL( kind=dp ), INTENT( IN ) :: A1
         REAL( kind=dp ), INTENT( IN ) :: B1
         REAL( kind=dp ), INTENT( IN ) :: C1
         REAL( kind=dp ), INTENT( IN ) :: CE
         REAL( kind=dp ), INTENT( IN ) :: CF
         ! Local:
         REAL( kind=dp ) K0
         REAL( kind=dp ) K1
         REAL( kind=dp ) KEND
         REAL( kind=dp ) :: INV_TEMP
         REAL( kind=dp ) :: TEMPOT300
         INV_TEMP  = 1.0D0 / TEMP
         TEMPOT300 = TEMP / 300.0D0
         K0 = A0 * COEFF_FALLOFF * DEXP(B0*INV_TEMP)* TEMPOT300**C0
         K1 = A1 * DEXP(B1*INV_TEMP) * TEMPOT300**C1
         KEND = ( ( 1.0D0 + ( ( 1.0D0 / CE ) * DLOG10( K0 / K1 ) ) ** 2.0D0 ) )
         KEND = 1.0D0 / KEND
         FALLOFF_T10 = ( K0 / ( 1.0D0 + K0/K1 ) ) * CF ** KEND
         RETURN
       END FUNCTION FALLOFF_T10

       REAL( dp ) FUNCTION KMT(TEMP,LWC,MMASS,DG,HENRY,ACOM,FB)
         IMPLICIT NONE
         REAL( dp ), INTENT( IN ) :: TEMP
         REAL( dp ), INTENT( IN ) :: LWC
         REAL( dp ), INTENT( IN ) :: MMASS
         REAL( dp ), INTENT( IN ) :: DG
         REAL( dp ), INTENT( IN ) :: HENRY
         REAL( dp ), INTENT( IN ) :: ACOM
         INTEGER,   INTENT( IN ) :: FB ! logical (forward/backward)
         REAL( dp )               :: RAD
         REAL( dp )               :: R_KMT
         REAL( dp )               :: R2_KMT
         REAL( dp )               :: PI_KMT
         REAL( dp )               :: V_mean
         INTRINSIC DEXP

         RAD    = DDIAM * 0.5D0
         R_KMT  = 8.3145D0
         R2_KMT = 0.08206D0
         PI_KMT = 3.1415926536D0

         V_mean = SQRT( 8D0 * R_KMT * TEMP * 1000.0D0 / PI_KMT / MMASS )
         KMT    = 1.0D0/((RAD*RAD)/(3D0*DG)+(4D0*RAD/(3D0*V_mean*ACOM)))
         IF ( FB .EQ. 0 ) THEN
            KMT = KMT * LWC / 1000.0D0
         ELSE
            KMT   = KMT  / ( R2_KMT * TEMP * HENRY )
         END IF
         RETURN
       END FUNCTION KMT

       REAL( kind=dp )FUNCTION KRXN ( KR, DH, RTYPE, QY, METAL, CLTYPE )

            IMPLICIT NONE

            ! Input
            REAL( kind=dp )     , INTENT( IN ) :: KR, DH
            INTEGER             , INTENT( IN ) :: QY, RTYPE, METAL
            CHARACTER( LEN = 2 ), INTENT( IN ) :: CLTYPE

            ! Local variables
            REAL( kind=dp )      :: Q, q1, COTHq, SVIinh
            REAL( kind=dp )      :: kO31, kO32, kO33, kO3T
            INTEGER              :: ind_L_H2SO4, ind_L_HSO4MIN, ind_L_SO4MIN2
            INTEGER              :: ind_L_HPLUS
            INTEGER              :: ind_L_SO2, ind_L_HSO3MIN, ind_L_SO3MIN2
            REAL( kind=dp )      :: PHI2

            ! Select cloud indices and properties
            IF ( CLTYPE .EQ. 'RS' ) THEN
              IND_L_HPLUS   = ind_Hp_RS
              IND_L_H2SO4   = ind_SULF_RS
              IND_L_HSO4MIN = ind_HSO4m_RS
              IND_L_SO4MIN2 = ind_SO4mm_RS
              IND_L_SO2     = ind_SO2_RS
              IND_L_HSO3MIN = ind_HSO3m_RS
              IND_L_SO3MIN2 = ind_SO3mm_RS
              PHI2          = PHI2_RS
            ELSE IF ( CLTYPE .EQ. 'CV' ) THEN
              IND_L_HPLUS   = ind_Hp_CV
              IND_L_H2SO4   = ind_SULF_CV
              IND_L_HSO4MIN = ind_HSO4m_CV
              IND_L_SO4MIN2 = ind_SO4mm_CV
              IND_L_SO2     = ind_SO2_CV
              IND_L_HSO3MIN = ind_HSO3m_CV
              IND_L_SO3MIN2 = ind_SO3mm_CV
              PHI2          = PHI2_CV
            END IF


            KRXN = KR * EXP( DH * TFAC )

            IF ( RTYPE .EQ. 1 ) THEN   ! SO2 - H2O2 OXIDATION
               KRXN = ( KRXN / ( 1.0D0 + 13.0D0 * VAR( ind_L_HPLUS ) * PHI2 ) ) * PHI2
!           ELSE IF ( RTYPE .EQ. 2 ) then   ! SO2 - PAA OXIDATION
!              KRXN = KRXN * (VAR(ind_L_HPLUS) * PHI2) + 7.00D2
            ELSE IF ( RTYPE .EQ. 3 ) then   ! SO2 - Fe3/Mn2 synergism and
               KRXN = KRXN * PHI2           ! MHP and PAA reaction
            ELSE IF ( RTYPE .EQ. 4 ) then   ! only one reactant
               KRXN = KRXN / PHI2
            END IF

            ! SO4 inhibition only for metal-catalyzed oxidation
            IF (METAL .GT. 0) THEN
               ! SO4 inhibition of metal catalysis
               SVIinh = 1.0D0 + 75.0D0 * ( ( VAR( ind_L_H2SO4 )     &
                        +                    VAR( ind_L_HSO4MIN )   &
                        +                    VAR( ind_L_SO4MIN2 ) ) &
                        * PHI2 )**0.67D0
               KRXN = KRXN / SVIinh
            END IF

!           Ionic strength impact on SIV-O3 reaction rate
!                 IF (QY .GT. 0) THEN
!                    KRXN = KRXN * (1.0D0 + 2.5 * STION)
!                 END IF

!           Aqueous diffusion limitation for O3

            q1 = 0.0D0
            Q = 1.0D0

            IF( QY .GE. 1 ) THEN

               kO31 = 2.4D+4 * EXP( 0.0D0 * TFAC )
               kO32 = 3.7D+5 * EXP( -5530.88D0 * TFAC )
               kO33 = 1.5D+9 * EXP( -5280.56D0 * TFAC )
               kO3T = ( kO31 * VAR( ind_L_SO2 ) + kO32 &
                    * VAR( ind_L_HSO3MIN ) &
                    + kO33 * VAR( ind_L_SO3MIN2 ) ) * PHI2

               q1 = DDIAM / 2.0D0 * SQRT( kO3T / DAQ )  ! diffuso-reactive param

               IF ( q1 .GT. 1.0D-3 ) THEN
                  IF ( q1 .LE. 100.0D0 ) THEN
                     COTHq = ( EXP( 2 * q1 ) + 1 ) / ( EXP( 2 * q1 ) - 1 )
                     Q = 3 * ( ( COTHq / q1 ) - ( 1 / ( q1 * q1 ) ) )
                     IF ( Q .GT. 1.0D0 ) Q = 1.0D0
                  ELSE
                     Q = 3.d0/q1
                  END IF
               ELSE
                  Q = 1.0D0
               END IF

               KRXN = KRXN * Q

            END IF

            KRXN = KRXN * PHI2

            RETURN
       END FUNCTION KRXN
#ENDINLINE
